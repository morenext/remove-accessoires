{"version":3,"sources":["logo.svg","hue/hue.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Hue","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hue","jsHue","buttonLabel","buttonHandler","discover","bind","assertThisInitialized","message","_this2","then","bridges","length","setState","console","log","connect","concat","map","b","bridge","internalipaddress","catch","e","promises","newPromises","Promise","resolve","reject","v","push","all","race","firstTrue","_this3","link","user","remove","_this4","createUser","data","error","username","success","filter","keys","reduce","result","key","resource","objectSpread","id","getSensors","_this5","responseFilter","modelid","buttons","getResourceLinks","button","apply","toConsumableArray","links","includes","formulas","forEach","deleteResourceLink","deleteSensor","JSON","stringify","react_default","a","createElement","onClick","Component","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f071522.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport jsHue from 'jshue';\r\n\r\nclass Hue extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hue: jsHue(),\r\n            buttonLabel: 'Discover',\r\n            buttonHandler: this.discover.bind(this),\r\n            message: \"Make sure you are connected to the same network as the bridge.\"\r\n        };\r\n    }\r\n\r\n    discover() {\r\n        this.state.hue.discover().then(bridges => {\r\n            if(bridges.length === 0) {\r\n                this.setState({message: `No bridges found.`});\r\n                console.log('No bridges found. :(');\r\n            }\r\n            else {\r\n                this.setState({\r\n                    buttonLabel: 'Connect',\r\n                    buttonHandler: this.connect.bind(this),\r\n                    message: `${bridges.length} bridges found, press link button and click connect.`\r\n                });\r\n            }\r\n            this.setState({bridges: bridges.map(b => this.state.hue.bridge(b.internalipaddress))});\r\n        }).catch(e => {\r\n            console.log('Error finding bridges', e);\r\n        });\r\n    }\r\n\r\n    firstTrue(promises) {\r\n        const newPromises = promises.map(p => new Promise(\r\n            (resolve, reject) => p.then(v => v && resolve(true), reject)\r\n        ));\r\n        newPromises.push(Promise.all(promises).then(() => false));\r\n        return Promise.race(newPromises);\r\n    }\r\n\r\n    async connect() {\r\n        let bridges = this.state.bridges;\r\n        if(!this.state.bridges) return;\r\n\r\n        this.setState({message: `Trying to link to a bridge.`});\r\n        await this.firstTrue( bridges.map(bridge => this.link(bridge)) );\r\n\r\n        if(!this.state.user) {\r\n            this.setState({message: `Link button is not pressed, please try again.`});\r\n        } else {\r\n            this.setState({\r\n                buttonLabel: 'Remove Accessories',\r\n                buttonHandler: this.remove.bind(this),\r\n                message: `Successfully linked`\r\n            });\r\n        }\r\n    }\r\n\r\n    link(bridge) {\r\n        return bridge.createUser('accessories-cleaner#testdevice').then(data => {\r\n            if(data[0].error) return;\r\n\r\n            let username = data[0].success.username;\r\n            console.log('New username:', username);\r\n\r\n            this.setState({user: bridge.user(username)});\r\n            return true;\r\n        }, e => {\r\n            console.log('Error:', e);\r\n        });\r\n    }\r\n\r\n    responseFilter(data, filter){\r\n        return Object.keys(data).reduce((result, key) => {\r\n            let resource = data[key];\r\n            if(filter(resource)) {\r\n                result.push({\r\n                    id: key,\r\n                    ...resource\r\n                });\r\n            }\r\n            return result;\r\n        }, []);\r\n    }\r\n\r\n    async remove() {\r\n        let user =  this.state.user;\r\n        console.log('Removing the accessories');\r\n\r\n        let buttons = await user.getSensors().then(data => {\r\n            return this.responseFilter(data, resource =>  resource.modelid === 'RWL022' );\r\n        });\r\n\r\n        let formulas = await user.getResourceLinks().then(data => {\r\n            return buttons.reduce((result, button) => {\r\n                result.push(...this.responseFilter(data, resource => resource.links.includes(`/sensors/${button.id}`)));\r\n                return result;\r\n            }, []);\r\n        });\r\n\r\n        formulas.forEach(resource => user.deleteResourceLink(resource.id));\r\n        buttons.forEach(resource => user.deleteSensor(resource.id));\r\n\r\n        let message;\r\n        if(buttons.length === 0){\r\n            message = 'No Accessories found on this bridge.'\r\n        } else {\r\n            message = `Successfully removed ${buttons.length} Accessories and ${formulas.length} formulas.`\r\n        }\r\n\r\n        this.setState({\r\n            buttonLabel: 'Done',\r\n            message: message\r\n        });\r\n\r\n        console.log('Removed resources:');\r\n        console.log('Sensors:');\r\n        console.log(JSON.stringify(buttons,null,2));\r\n        console.log('Resource links:');\r\n        console.log(JSON.stringify(formulas,null,2));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>\r\n                    { this.state.message }\r\n                </p>\r\n                <button onClick={ this.state.buttonHandler }>\r\n                    { this.state.buttonLabel }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Hue;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Hue from './hue/hue';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Hue />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}